// <auto-generated />
using System;
using ClinicManagementSystem.DAL.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ClinicManagementSystem.DAL.Migrations
{
    [DbContext(typeof(ProgramContext))]
    partial class ProgramContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ClinicManagementSystem.DAL.Models.ApplicationUser", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("password")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("phoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Patient");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("ApplicationUsers");

                    b.HasData(
                        new
                        {
                            id = 1,
                            email = "admin@gmail.com",
                            firstName = "Admin",
                            lastName = "1",
                            password = new byte[] { 36, 50, 97, 36, 49, 49, 36, 78, 98, 108, 116, 47, 78, 70, 86, 53, 66, 47, 110, 78, 104, 79, 66, 56, 113, 57, 119, 105, 101, 118, 113, 56, 101, 89, 121, 97, 65, 107, 104, 118, 76, 89, 120, 114, 70, 78, 114, 75, 66, 117, 109, 112, 86, 107, 67, 110, 97, 51, 113, 54 },
                            phoneNumber = "1234567890",
                            role = "Admin",
                            userName = "admin"
                        });
                });

            modelBuilder.Entity("ClinicManagementSystem.DAL.Models.ChatRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("doctorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("doctorId");

                    b.ToTable("ChatRooms");
                });

            modelBuilder.Entity("ClinicManagementSystem.DAL.Models.Doctor", b =>
                {
                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.Property<string>("location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("major")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("userId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("ClinicManagementSystem.DAL.Models.DoctorAppointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<TimeOnly>("appointmentEnd")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("appointmentStart")
                        .HasColumnType("time");

                    b.Property<DateOnly>("date")
                        .HasColumnType("date");

                    b.Property<int>("doctorId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("duration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("time")
                        .HasDefaultValue(new TimeSpan(0, 2, 0, 0, 0));

                    b.Property<string>("status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("doctorId");

                    b.ToTable("DoctorAppointments");
                });

            modelBuilder.Entity("ClinicManagementSystem.DAL.Models.DoctorPatient", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("DoctorPatients");
                });

            modelBuilder.Entity("ClinicManagementSystem.DAL.Models.MedicalHistory", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("describtion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("doctorId")
                        .HasColumnType("int");

                    b.Property<string>("note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("patientId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("doctorId");

                    b.HasIndex("patientId");

                    b.ToTable("MedicalHistories");
                });

            modelBuilder.Entity("ClinicManagementSystem.DAL.Models.Patient", b =>
                {
                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.Property<int>("approvedAppointments")
                        .HasColumnType("int");

                    b.Property<int>("pendingAppointments")
                        .HasColumnType("int");

                    b.Property<int>("rejectedAppointments")
                        .HasColumnType("int");

                    b.HasKey("userId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("ClinicManagementSystem.DAL.Models.Reservation", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("appointmentId")
                        .HasColumnType("int");

                    b.Property<int>("patientId")
                        .HasColumnType("int");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("appointmentId");

                    b.HasIndex("patientId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("ClinicManagementSystem.DAL.Models.ChatRoom", b =>
                {
                    b.HasOne("ClinicManagementSystem.DAL.Models.Doctor", "doctor")
                        .WithMany()
                        .HasForeignKey("doctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("doctor");
                });

            modelBuilder.Entity("ClinicManagementSystem.DAL.Models.Doctor", b =>
                {
                    b.HasOne("ClinicManagementSystem.DAL.Models.ApplicationUser", "user")
                        .WithOne("doctor")
                        .HasForeignKey("ClinicManagementSystem.DAL.Models.Doctor", "userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("ClinicManagementSystem.DAL.Models.DoctorAppointment", b =>
                {
                    b.HasOne("ClinicManagementSystem.DAL.Models.Doctor", "doctor")
                        .WithMany("appointments")
                        .HasForeignKey("doctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("doctor");
                });

            modelBuilder.Entity("ClinicManagementSystem.DAL.Models.DoctorPatient", b =>
                {
                    b.HasOne("ClinicManagementSystem.DAL.Models.Doctor", "Doctor")
                        .WithMany("DoctorPatients")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ClinicManagementSystem.DAL.Models.Patient", "Patient")
                        .WithMany("DoctorPatients")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ClinicManagementSystem.DAL.Models.MedicalHistory", b =>
                {
                    b.HasOne("ClinicManagementSystem.DAL.Models.Doctor", "doctor")
                        .WithMany()
                        .HasForeignKey("doctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClinicManagementSystem.DAL.Models.Patient", "patient")
                        .WithMany("medicalHistory")
                        .HasForeignKey("patientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("doctor");

                    b.Navigation("patient");
                });

            modelBuilder.Entity("ClinicManagementSystem.DAL.Models.Patient", b =>
                {
                    b.HasOne("ClinicManagementSystem.DAL.Models.ApplicationUser", "user")
                        .WithOne("patient")
                        .HasForeignKey("ClinicManagementSystem.DAL.Models.Patient", "userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("ClinicManagementSystem.DAL.Models.Reservation", b =>
                {
                    b.HasOne("ClinicManagementSystem.DAL.Models.DoctorAppointment", "appointment")
                        .WithMany()
                        .HasForeignKey("appointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClinicManagementSystem.DAL.Models.Patient", "patient")
                        .WithMany("reservations")
                        .HasForeignKey("patientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("appointment");

                    b.Navigation("patient");
                });

            modelBuilder.Entity("ClinicManagementSystem.DAL.Models.ApplicationUser", b =>
                {
                    b.Navigation("doctor");

                    b.Navigation("patient");
                });

            modelBuilder.Entity("ClinicManagementSystem.DAL.Models.Doctor", b =>
                {
                    b.Navigation("DoctorPatients");

                    b.Navigation("appointments");
                });

            modelBuilder.Entity("ClinicManagementSystem.DAL.Models.Patient", b =>
                {
                    b.Navigation("DoctorPatients");

                    b.Navigation("medicalHistory");

                    b.Navigation("reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
